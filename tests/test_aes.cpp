#include <iostream>
#include <vector>
#include <cstdint>
#include <iomanip>
#include "../src/transformations.h"
#include "../key_expansion/key_expansion.h"

using namespace std;

// Color codes for output formatting
const string red = "\033[1;31m";
const string reset = "\033[0m";
const string green = "\033[1;32m";

/**
 * Utility function to print a vector of bytes in hexadecimal format.
 * 
 * @param vec The vector of bytes to print.
 */
void printVector(const vector<uint8_t>& vec) {
    for (const auto& byte : vec) {
        cout << hex << setw(2) << setfill('0') << (int)byte << " ";
    }
    cout << endl;
}

/**
 * Function to compare two vectors of bytes and print the result.
 * 
 * @param vec1 The first vector of bytes.
 * @param vec2 The second vector of bytes.
 * @param functionName The name of the function being tested.
 * @return True if the vectors are equal, false otherwise.
 */
bool compareVectors(const vector<uint8_t>& vec1, const vector<uint8_t>& vec2, const string& functionName) {
    if (vec1 == vec2) {
        cout << functionName << green << " PASSED" << reset << endl;
        return true;
    } else {
        cout << functionName << red << " FAILED" << reset << endl;
        cout << "Expected: ";
        printVector(vec2);
        cout << "Got:      ";
        printVector(vec1);
        return false;
    }
}

int main() {
    bool allPassed = true; // Flag to check if all tests pass

    // Test SubBytes
    vector<uint8_t> subBytesInput = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
    vector<uint8_t> subBytesExpected = {0x23, 0x1a, 0x42, 0xc2, 0xc4, 0xbe, 0x04, 0x5d, 0xc7, 0xc7, 0x46, 0x3a, 0xe1, 0x9a, 0xc5, 0x18};
    subBytes(subBytesInput);
    if (!compareVectors(subBytesInput, subBytesExpected, "SubBytes")) allPassed = false;

    // Test ShiftRows
    vector<uint8_t> shiftRowsInput = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
    vector<uint8_t> shiftRowsExpected = {0x32, 0x5a, 0x98, 0x34, 0x88, 0x31, 0x07, 0xa8, 0x31, 0x37, 0xf6, 0x8d, 0xe0, 0x43, 0x30, 0xa2};
    shiftRows(shiftRowsInput);
    if (!compareVectors(shiftRowsInput, shiftRowsExpected, "ShiftRows")) allPassed = false;

    // Test MixColumns
    vector<uint8_t> mixColumnsInput = {0xdb, 0x13, 0x53, 0x45, 0xf2, 0x0a, 0x22, 0x5c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};
    vector<uint8_t> mixColumnsExpected = {0x8e, 0x4d, 0xa1, 0xbc, 0x9f, 0xdc, 0x58, 0x9d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};
    mixColumns(mixColumnsInput);
    if (!compareVectors(mixColumnsInput, mixColumnsExpected, "MixColumns")) allPassed = false;

    // Test InverseSubBytes
    vector<uint8_t> inverseSubBytesInput = {0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0x98, 0xe0, 0xf8, 0x89, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e};
    vector<uint8_t> inverseSubBytesExpected = {0xbd, 0x6e, 0x22, 0x12, 0x1c, 0xe2, 0xa0, 0xe1, 0xf2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9};
    inverseSubBytes(inverseSubBytesInput);
    if (!compareVectors(inverseSubBytesInput, inverseSubBytesExpected, "InverseSubBytes")) allPassed = false;

    // Test InverseShiftRows
    vector<uint8_t> inverseShiftRowsInput = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
    vector<uint8_t> inverseShiftRowsExpected = {0x32, 0x37, 0x98, 0x8d, 0x88, 0x43, 0x07, 0xa2, 0x31, 0x5a, 0xf6, 0x34, 0xe0, 0x31, 0x30, 0xa8};
    inverseShiftRows(inverseShiftRowsInput);
    if (!compareVectors(inverseShiftRowsInput, inverseShiftRowsExpected, "InverseShiftRows")) allPassed = false;

    // Test InverseMixColumns
    vector<uint8_t> inverseMixColumnsInput = {0x8e, 0x4d, 0xa1, 0xbc, 0x9f, 0xdc, 0x58, 0x9d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};
    vector<uint8_t> inverseMixColumnsExpected = {0xdb, 0x13, 0x53, 0x45, 0xf2, 0x0a, 0x22, 0x5c, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};
    inverseMixColumns(inverseMixColumnsInput);
    if (!compareVectors(inverseMixColumnsInput, inverseMixColumnsExpected, "InverseMixColumns")) allPassed = false;

    // Test KeyExpansion
    // Source: https://www.kavaliro.com/wp-content/uploads/2014/03/AES.pdf
    vector<uint8_t> key = {0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75};
    vector<vector<uint8_t>> expectedRoundKeys = {
        {0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75},
        {0xE2, 0x32, 0xFC, 0xF1, 0x91, 0x12, 0x91, 0x88, 0xB1, 0x59, 0xE4, 0xE6, 0xD6, 0x79, 0xA2, 0x93},
        {0x56, 0x08, 0x20, 0x07, 0xC7, 0x1A, 0xB1, 0x8F, 0x76, 0x43, 0x55, 0x69, 0xA0, 0x3A, 0xF7, 0xFA},
        {0xD2, 0x60, 0x0D, 0xE7, 0x15, 0x7A, 0xBC, 0x68, 0x63, 0x39, 0xE9, 0x01, 0xC3, 0x03, 0x1E, 0xFB},
        {0xA1, 0x12, 0x02, 0xC9, 0xB4, 0x68, 0xBE, 0xA1, 0xD7, 0x51, 0x57, 0xA0, 0x14, 0x52, 0x49, 0x5B},
        {0xB1, 0x29, 0x3B, 0x33, 0x05, 0x41, 0x85, 0x92, 0xD2, 0x10, 0xD2, 0x32, 0xC6, 0x42, 0x9B, 0x69},
        {0xBD, 0x3D, 0xC2, 0x87, 0xB8, 0x7C, 0x47, 0x15, 0x6A, 0x6C, 0x95, 0x27, 0xAC, 0x2E, 0x0E, 0x4E},
        {0xCC, 0x96, 0xED, 0x16, 0x74, 0xEA, 0xAA, 0x03, 0x1E, 0x86, 0x3F, 0x24, 0xB2, 0xA8, 0x31, 0x6A},
        {0x8E, 0x51, 0xEF, 0x21, 0xFA, 0xBB, 0x45, 0x22, 0xE4, 0x3D, 0x7A, 0x06, 0x56, 0x95, 0x4B, 0x6C},
        {0xBF, 0xE2, 0xBF, 0x90, 0x45, 0x59, 0xFA, 0xB2, 0xA1, 0x64, 0x80, 0xB4, 0xF7, 0xF1, 0xCB, 0xD8},
        {0x28, 0xFD, 0xDE, 0xF8, 0x6D, 0xA4, 0x24, 0x4A, 0xCC, 0xC0, 0xA4, 0xFE, 0x3B, 0x31, 0x6F, 0x26}
    };
    vector<vector<uint8_t>> roundKeys = keyExpansion(key);

    // Compare each round key with the expected round keys
    for (size_t i = 0; i < expectedRoundKeys.size(); ++i) {
        cout << "Round Key " << i << ": ";
        if (!compareVectors(roundKeys[i], expectedRoundKeys[i], "KeyExpansion")) allPassed = false;
    }

    // Print final result
    if (allPassed) {
        cout << "All tests PASSED." << endl;
    } else {
        cout << "Some tests FAILED." << endl;
    }

    return 0;
}
